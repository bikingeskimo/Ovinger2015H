package Algoritmer.Oving5;

/**
 *
 * Implementer en hashtabell med plass for ti millioner tall. Hashtabellen kan
 * selvfølgelig ha noe mer enn ti millioner plasser, både for ytelsens skyld, og
 * med tanke på nærmeste primtall eller toerpotens. Men ikke lag hashtabellen
 * mer enn 25% større enn nødvendig.
 * Bruk hashfunksjoner som egner seg for denne anvendelsen.
 *
 *
 * 2. Fyll en annen tabell (ikke hashtabell) med ti millioner tilfeldige tall. Tallene må
 * være spredt over et område som er mye større enn tabellstørrelsen. Vi gjør klar
 * de tilfeldige tallene på forhånd, da randomfunksjonen er mye tregere enn en
 * god hashfunksjon. Vi vil måle tiden på hashoperasjonene, ikke Math.Random.
 * 3. Ta tiden på å sette inn de tilfeldige tallene i hashtabellen deres. Sammenlign
 * med tidsforbruket for å sette de samme tallene inn i java.util sin HashMap.1.
 *
 *
 *
 * Created by Roger on 14.09.2015.
 */
public class Oving5 {
}
