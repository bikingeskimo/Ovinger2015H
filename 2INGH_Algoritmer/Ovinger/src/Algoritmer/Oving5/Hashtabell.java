/**
 * Implementer en hashtabell som kan lagre tekststrenger. Om dere bruker java, er
 * det naturlig å la hashtabell være en klasse. Ikke bruk java sin ferdiglagde hashtabell.
 * Håndter kollisjoner med dobbel hashing. Lag passende hashfunksjoner h1 og h2.
 * De hashfunksjonene vi har sett på til nå, opererer på tall. Strenger kan konverteres
 * til heltall ved hjelp av ascii/unicodeverdier. Bruk en løkke som plukker ut tegnene
 * i en streng og beregner et heltall. Dette tallet kan deretter brukes på vanlig måte
 * med hashfunksjonene. Tegnene i strengen bør vektes ulikt, slik at f.eks. «Caro» og
 * «Cora» får ulik nøkkel, selv om navnene har de samme bokstavene.
 *
 * Vedlagt er en fil som heter navn, som inneholder navn på de som er involvert i
 * dette faget. La programmet legge disse inn i hashtabellen, og implementer oppslag
 * så vi kan spørre hvem som er med i faget. Ikke lag hashtabellen mye større enn
 * nødvendig. Det selvfølgelig lov å ha den litt større for å komme opp til nærmeste
 * toerpotens eller primtall. Men unngå halvfull tabell.
 * La testprogrammet skrive ut lastfaktoren til slutt, og la det skrive ut hver eneste
 * kollisjon som oppstår under innsetting og søk. (Skriv ut de to navnene som kolliderer.)
 * Tell opp totalt antall kollisjoner under innsetting, og skriv det ut sammen
 * med lastfaktoren...
 *
 */
package Algoritmer.Oving5;

/**
 * @author Roger
 *
 */
public class Hashtabell {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}
	
	public void h1() {}
	
	public void h2() {}

}
